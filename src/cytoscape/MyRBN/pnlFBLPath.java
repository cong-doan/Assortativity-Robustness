/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * pnlResults.java
 *
 * Created on Apr 20, 2010, 2:24:14 PM
 */

package cytoscape.MyRBN;

import cytoscape.CyEdge;
import cytoscape.CyNetwork;
import cytoscape.CyNode;
import cytoscape.Cytoscape;
import cytoscape.data.CyAttributes;
import cytoscape.layout.CyLayoutAlgorithm;
import cytoscape.layout.CyLayouts;
import cytoscape.task.ui.JTaskConfig;
import cytoscape.task.util.TaskManager;
import cytoscape.view.CyNetworkView;
import giny.model.Edge;
import giny.model.Node;
import java.awt.Cursor;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import javax.swing.AbstractListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import myrbn.MyOpenCL;
import myrbn.MyRBN;
import myrbn.NodeInteraction;

/**
 *
 * @author Le Duc Hau
 */
public class pnlFBLPath extends javax.swing.JPanel {

    /** Creates new form pnlResults */


    public pnlFBLPath() {
        initComponents();
        this.tblResult.setAutoCreateRowSorter(true);
        jLabel6.setText("<HTML>Press Ctrl to select/deselect<BR>discontigous nodes</HTML>");
        Main.pnlFBLPathLoaded=true;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grbFBL = new javax.swing.ButtonGroup();
        grbPath = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        cboMaxFBLLength = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        btnFindFBL = new javax.swing.JButton();
        chkDistinctFBLOnly = new javax.swing.JCheckBox();
        chkFindCoupleFBL = new javax.swing.JCheckBox();
        chkFBLLength = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        cboMaxPathLength = new javax.swing.JComboBox();
        btnFindPath = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstFromNode = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstToNode = new javax.swing.JList();
        chkFindFFLs = new javax.swing.JCheckBox();
        chkPathLength = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblResult = new javax.swing.JTable();
        btnShowFBLPath = new javax.swing.JButton();
        lblInfo = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblInfo1 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(1062, 235));
        setMinimumSize(new java.awt.Dimension(1062, 235));
        setPreferredSize(new java.awt.Dimension(1044, 267));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Feedback & Coupled Feedback Loop Analysis", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        cboMaxFBLLength.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        jLabel4.setText("Length");

        btnFindFBL.setText("Find");
        btnFindFBL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindFBLActionPerformed(evt);
            }
        });

        chkDistinctFBLOnly.setSelected(true);
        chkDistinctFBLOnly.setText("Show distinct Feedback Loops");
        chkDistinctFBLOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDistinctFBLOnlyActionPerformed(evt);
            }
        });

        chkFindCoupleFBL.setText("Find Coupled Feedback Loops");

        chkFBLLength.setText("Less than or Equal to");

        jLabel7.setFont(new java.awt.Font("Tahoma", 2, 10));
        jLabel7.setText("Select nodes in the network");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cboMaxFBLLength, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFindFBL)
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkFindCoupleFBL)
                    .addComponent(chkDistinctFBLOnly)
                    .addComponent(chkFBLLength, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(8, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(208, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFindFBL)
                    .addComponent(jLabel4)
                    .addComponent(cboMaxFBLLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkFBLLength))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkDistinctFBLOnly, javax.swing.GroupLayout.PREFERRED_SIZE, 20, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkFindCoupleFBL)
                .addContainerGap())
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(25, 25, 25)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(20, Short.MAX_VALUE)))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Path & Feed-forward Loop Analysis", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel5.setText("Length");

        cboMaxPathLength.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));

        btnFindPath.setText("Find");
        btnFindPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindPathActionPerformed(evt);
            }
        });

        jLabel1.setText("From");

        jLabel2.setText("To");

        jScrollPane1.setViewportView(lstFromNode);

        jScrollPane2.setViewportView(lstToNode);

        chkFindFFLs.setSelected(true);
        chkFindFFLs.setText("Find Feed-forward Loops ");

        chkPathLength.setSelected(true);
        chkPathLength.setText("Less than or Equal to");

        jLabel6.setFont(new java.awt.Font("Tahoma", 2, 10));
        jLabel6.setText("<HTML>Press Ctrl to select/deselect<BR>discontigous nodes</HTML>");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(chkPathLength, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(cboMaxPathLength, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(8, 8, 8)
                            .addComponent(btnFindPath)))
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(chkFindFFLs, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(11, 11, 11))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel1))
                    .addComponent(jScrollPane1, 0, 0, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel2))
                    .addComponent(jScrollPane2, 0, 0, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(btnFindPath)
                            .addComponent(cboMaxPathLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkPathLength)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkFindFFLs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)))
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "List of FBLs or Paths found", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        tblResult.setAutoCreateRowSorter(true);
        tblResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Node 1", "Node 2", "Node 3", "Node 4"
            }
        ));
        tblResult.setToolTipText("Press Ctrl to select discontigous rows");
        tblResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblResultMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblResultMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tblResult);

        btnShowFBLPath.setText("Show");
        btnShowFBLPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowFBLPathActionPerformed(evt);
            }
        });

        lblInfo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblInfo.setForeground(new java.awt.Color(255, 0, 0));
        lblInfo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblInfo.setText("...");

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel3.setText("Choose a row to view a FBL/Path");

        lblInfo1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblInfo1.setForeground(new java.awt.Color(255, 0, 0));
        lblInfo1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblInfo1.setText(" ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnShowFBLPath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                        .addComponent(lblInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addComponent(lblInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnShowFBLPath)
                        .addComponent(jLabel3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInfo)
                            .addComponent(lblInfo1))
                        .addGap(11, 11, 11))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblResultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblResultMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_tblResultMouseClicked

    private void btnFindFBLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindFBLActionPerformed
        // TODO add your handling code here:

        try{

            //MyRBN myrbn = new MyRBN();
            //MyRBN.myopencl.calculateSizeOfImage2D(MyRBN.rndina.size());
            
//            CyAttributes cyNetworkAttrs=  Cytoscape.getNetworkAttributes();
//            String NetworkType;
//            NetworkType=cyNetworkAttrs.getStringAttribute(Cytoscape.getCurrentNetwork().getIdentifier(), "NetworkType");
//            if(NetworkType!=null){
//                if(NetworkType.compareToIgnoreCase("Transition")!=0 && NetworkType.compareToIgnoreCase("MOTIF")!=0){//Generated Networks
//                    Main.workingNetwork = Cytoscape.getCurrentNetwork();
//                    Main.workingNetworkView = Cytoscape.getNetworkView(Main.workingNetwork.getIdentifier());
//                }
//            }else{//Imported Networks
//                Main.workingNetwork = Cytoscape.getCurrentNetwork();
//                Main.workingNetworkView = Cytoscape.getNetworkView(Main.workingNetwork.getIdentifier());
//            }
//
//            Main.ValidNetwork = Common.readCurrentNetworkInfo();

            Main.ValidNetwork = Common.readCurrentNetworkInfo();//colin: fix bug: can't use OpenCL to find FBLs in random created networks

            if(Main.workingNetwork==null || Main.workingNetwork.nodesList().size()==0){
                JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "You should import/generate/select a network first");
                return;
            }

            if(Main.ValidNetwork==false){
                JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "Interacions of this network are not compatible with NetDSpar!", "Notice",JOptionPane.ERROR_MESSAGE);
                return;
            }

            Set selectedNodes=Main.workingNetwork.getSelectedNodes();
            if(selectedNodes.size()==0){
                JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "Please select at least one node!");
                return;
            }

            if(MyRBN.nodes!=null & MyRBN.rndina!=null){
                Common.preprocessInteractionList(MyRBN.rndina, "NodeSrc");
                Common.sortQuickInteractionListInAsc(MyRBN.rndina);

                Common.out = new Hashtable<String, ArrayList<NodeInteraction>>();
                for(int n=0;n< MyRBN.nodes.size();n++){
                    ArrayList<Integer> posarr1 = Common.searchUsingBinaryInteraction(MyRBN.nodes.get(n).NodeID, MyRBN.rndina);
                    if(posarr1!=null && posarr1.size()>0){
                        ArrayList<NodeInteraction> ni=new ArrayList<NodeInteraction>();
                        for(int i=0;i<posarr1.size();i++){
                            ni.add(new NodeInteraction(MyRBN.rndina.get(posarr1.get(i)).NodeDst, MyRBN.rndina.get(posarr1.get(i)).InteractionType));
                        }
                        Common.out.put(MyRBN.nodes.get(n).NodeID, ni);
                    }
                }

                // colin edit for OpenCL
                if(Common.indexIDs != null)
                    Common.indexIDs.clear();
                Common.indexIDs = null;
                Common.indexIDs = new Hashtable<Integer, String>();

                if(Common.stringIDs != null)
                    Common.stringIDs.clear();
                Common.stringIDs = null;
                Common.stringIDs = new Hashtable<String, Integer>();

                if(Common.nodeIDsArr != null)
                    Common.nodeIDsArr.clear();
                Common.nodeIDsArr = null;
                Common.nodeIDsArr = new ArrayList<Integer>();
                
                List<Node> nl = Main.workingNetwork.nodesList();
                int nodeCount = nl.size();
                for(int i=0; i<nodeCount; i++)
                {
                    Node node = nl.get(i);
                    Common.indexIDs.put(node.getRootGraphIndex(), node.getIdentifier());
                    Common.stringIDs.put(node.getIdentifier(), node.getRootGraphIndex());
                    Common.nodeIDsArr.add(node.getRootGraphIndex());
                }
                /**/
            }


            FindFBLTask task= new FindFBLTask();

            // Configure JTask Dialog Pop-Up Box
            //MyOpenCL.showMemory("Before FBL:");
            JTaskConfig jTaskConfig = new JTaskConfig();
            jTaskConfig.setOwner(Cytoscape.getDesktop());
            jTaskConfig.displayCloseButton(false);

            jTaskConfig.displayCancelButton(true);
            
            jTaskConfig.displayStatus(true);

            jTaskConfig.setAutoDispose(true);

            // Execute Task in New Thread; pops open JTask Dialog Box.
            TaskManager.executeTask(task, jTaskConfig);


        }catch(Exception e){
            JOptionPane.showMessageDialog(Cytoscape.getDesktop(),"Error: " + e.getMessage());
            // colin edit for OpenCL
            //e.printStackTrace();
            /**/
        }
        finally
        {
            // release memory
            if(MyRBN.FBLs != null)
            {
                MyRBN.FBLs.clear();
                MyRBN.FBLs = null;
            }
            
            System.gc();
            // end release
            //MyOpenCL.showMemory("After FBL:");
        }
}//GEN-LAST:event_btnFindFBLActionPerformed

    private void btnFindPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindPathActionPerformed
        // TODO add your handling code here:
                
        try{

//            CyAttributes cyNetworkAttrs=  Cytoscape.getNetworkAttributes();
//            String NetworkType;
//            NetworkType=cyNetworkAttrs.getStringAttribute(Cytoscape.getCurrentNetwork().getIdentifier(), "NetworkType");
//            if(NetworkType!=null){
//                if(NetworkType.compareToIgnoreCase("Transition")!=0 && NetworkType.compareToIgnoreCase("MOTIF")!=0){//Generated Networks
//                    Main.workingNetwork = Cytoscape.getCurrentNetwork();
//                    Main.workingNetworkView = Cytoscape.getNetworkView(Main.workingNetwork.getIdentifier());
//                }
//            }else{//Imported Networks
//                Main.workingNetwork = Cytoscape.getCurrentNetwork();
//                Main.workingNetworkView = Cytoscape.getNetworkView(Main.workingNetwork.getIdentifier());
//            }
//
//            Main.ValidNetwork = Common.readCurrentNetworkInfo();
            Main.ValidNetwork = Common.readCurrentNetworkInfo();//colin: fix bug: can't use OpenCL to find FBLs in random created networks

           if(Main.workingNetwork==null || Main.workingNetwork.nodesList().size()==0){
                JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "You should import/generate/select a network first");
                return;
            }

            if(Main.ValidNetwork==false){
                JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "Interacions of this network are not compatible with NetDSpar!", "Notice",JOptionPane.ERROR_MESSAGE);
                return;
            }

            if(this.lstFromNode.getSelectedIndices().length==0 || this.lstToNode.getSelectedIndices().length==0){
                JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "You should select at least one input and one output node.");
                return;
            }
                        
            if(MyRBN.nodes!=null & MyRBN.rndina!=null){
                Common.preprocessInteractionList(MyRBN.rndina, "NodeSrc");
                Common.sortQuickInteractionListInAsc(MyRBN.rndina);

                Common.out = new Hashtable<String, ArrayList<NodeInteraction>>();
                for(int n=0;n< MyRBN.nodes.size();n++){
                    ArrayList<Integer> posarr1 = Common.searchUsingBinaryInteraction(MyRBN.nodes.get(n).NodeID, MyRBN.rndina);
                    if(posarr1!=null && posarr1.size()>0){
                        ArrayList<NodeInteraction> ni=new ArrayList<NodeInteraction>();
                        for(int i=0;i<posarr1.size();i++){
                            ni.add(new NodeInteraction(MyRBN.rndina.get(posarr1.get(i)).NodeDst, MyRBN.rndina.get(posarr1.get(i)).InteractionType));
                        }
                        Common.out.put(MyRBN.nodes.get(n).NodeID, ni);
                    }
                }

                // colin edit for OpenCL
                if(Common.indexIDs != null)
                    Common.indexIDs.clear();
                Common.indexIDs = null;
                Common.indexIDs = new Hashtable<Integer, String>();

                if(Common.stringIDs != null)
                    Common.stringIDs.clear();
                Common.stringIDs = null;
                Common.stringIDs = new Hashtable<String, Integer>();

                if(Common.nodeIDsArr != null)
                    Common.nodeIDsArr.clear();
                Common.nodeIDsArr = null;
                Common.nodeIDsArr = new ArrayList<Integer>();
                
                List<Node> nl = Main.workingNetwork.nodesList();
                int nodeCount = nl.size();
                for(int i=0; i<nodeCount; i++)
                {
                    Node node = nl.get(i);
                    Common.indexIDs.put(node.getRootGraphIndex(), node.getIdentifier());
                    Common.stringIDs.put(node.getIdentifier(), node.getRootGraphIndex());
                    Common.nodeIDsArr.add(node.getRootGraphIndex());
                }
                /**/
            }
            
            FindPathTask task= new FindPathTask();

            // Configure JTask Dialog Pop-Up Box
            //MyOpenCL.showMemory("Before FFL:");
            JTaskConfig jTaskConfig = new JTaskConfig();
            jTaskConfig.setOwner(Cytoscape.getDesktop());
            jTaskConfig.displayCloseButton(false);

            jTaskConfig.displayCancelButton(true);

            jTaskConfig.displayStatus(true);

            jTaskConfig.setAutoDispose(true);

            // Execute Task in New Thread; pops open JTask Dialog Box.
            TaskManager.executeTask(task, jTaskConfig);


        }catch(Exception e){
            JOptionPane.showMessageDialog(Cytoscape.getDesktop(),"Error: " + e.getMessage());
        }
        finally
        {
            // release memory
            System.gc();
            // end release
            //MyOpenCL.showMemory("After FFL:");
        }
    }//GEN-LAST:event_btnFindPathActionPerformed
    
    private void btnShowFBLPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowFBLPathActionPerformed
        // TODO add your handling code here:
        try{
            int ri[] = this.tblResult.getSelectedRows();
            
            if(ri.length<=0){
                return;
            }
            
            CyNetwork subNetwork=Cytoscape.createNetwork("MOTIF_",true);
            int i,j;
            List<Node> listNode=Main.workingNetwork.nodesList();
            Iterator<Node> it = listNode.iterator();
            CyNode aNode;
            CyEdge aEdge;

            
            //JOptionPane.showMessageDialog(Cytoscape.getDesktop(), ri.length + ":" + this.tblResult.getSelectedRows().length);
            for(int r=0;r<ri.length;r++){
                //JOptionPane.showMessageDialog(Cytoscape.getDesktop(),"Column Count: " + tblResult.getColumnCount() + ", r=" + r);
                int TotalNode;
                TotalNode=0;
                for(i=1;i<tblResult.getColumnCount();i++)
                    if(this.tblResult.getValueAt(ri[r], i)!=null) TotalNode++;

                //JOptionPane.showMessageDialog(Cytoscape.getDesktop(),"TotalNode=" + TotalNode);
                subNetwork.setTitle(subNetwork.getTitle()+"(");
                for(i=1;i<TotalNode+1;i++){
                    if(this.tblResult.getValueAt(ri[r], i)!=null){
                        //JOptionPane.showMessageDialog(Cytoscape.getDesktop(),"Node: Row Id: " + ri[r] + ", Col Id: " + i + ", Value: " + this.tblResult.getValueAt(ri[r], i));

                        aNode=Cytoscape.getCyNode(this.tblResult.getValueAt(ri[r], i).toString(), true);
                        subNetwork.addNode(aNode);
                        subNetwork.setTitle(subNetwork.getTitle()+aNode.getIdentifier()+"_");
                    }
                }
                subNetwork.setTitle(subNetwork.getTitle().substring(0, subNetwork.getTitle().length()-1));
                subNetwork.setTitle(subNetwork.getTitle()+")_");
                for(i=1;i<TotalNode;i++){
                    if(this.tblResult.getValueAt(ri[r], i)!=null){
                        //JOptionPane.showMessageDialog(Cytoscape.getDesktop(),"Edge: Row Id: " + ri[r] + ", Col Id: " + i + ", Value: " + this.tblResult.getValueAt(ri[r], i));
                        //JOptionPane.showMessageDialog(Cytoscape.getDesktop(),"NumOfIna: " + MyRBN.rndina.size());
                        for(j=0;j<MyRBN.rndina.size();j++){
                            //JOptionPane.showMessageDialog(Cytoscape.getDesktop(),MyRBN.rndina.get(j).NodeSrc.NodeID+","+Integer.parseInt(this.tblResult.getValueAt(ri[r], i).toString()) +","+ MyRBN.rndina.get(j).NodeDst.NodeID+","+Integer.parseInt(this.tblResult.getValueAt(ri[r], i+1).toString()));
                            if(MyRBN.rndina.get(j).NodeSrc.compareTo(this.tblResult.getValueAt(ri[r], i).toString())==0 && MyRBN.rndina.get(j).NodeDst.compareTo(this.tblResult.getValueAt(ri[r], i+1).toString())==0){
                                aEdge=Cytoscape.getCyEdge(MyRBN.rndina.get(j).NodeSrc,Integer.toString(j),MyRBN.rndina.get(j).NodeDst,Integer.toString(MyRBN.rndina.get(j).InteractionType));
                                subNetwork.addEdge(aEdge);
                                break;
                            }
                        }

                    }

                }
                //JOptionPane.showMessageDialog(Cytoscape.getDesktop(),"End of row: " + r);
            }
            subNetwork.setTitle(subNetwork.getTitle().substring(0, subNetwork.getTitle().length()-1));
            //Add network properties
            CyAttributes cyNetworkAttrs=  Cytoscape.getNetworkAttributes();
            cyNetworkAttrs.setAttribute(subNetwork.getIdentifier(), "NetworkType", "MOTIF");
            // Inform others via property change event.
            Cytoscape.firePropertyChange(Cytoscape.ATTRIBUTES_CHANGED, null, null);

            CyLayoutAlgorithm algo = CyLayouts.getLayout("force-directed");
            CyNetworkView curNetworkView = Cytoscape.getNetworkView(subNetwork.getIdentifier());
            curNetworkView.applyLayout(algo);
        }catch(Exception e){
            JOptionPane.showMessageDialog(Cytoscape.getDesktop(), e.getMessage());
        }
    }//GEN-LAST:event_btnShowFBLPathActionPerformed

    private void chkDistinctFBLOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDistinctFBLOnlyActionPerformed
        // TODO add your handling code here:
//        if(this.chkDistinctFBLOnly.isSelected()){
//            this.chkFindCoupleFBL.setEnabled(true);
//        }else{
//            this.chkFindCoupleFBL.setEnabled(false);
//        }
    }//GEN-LAST:event_chkDistinctFBLOnlyActionPerformed

    private void tblResultMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblResultMouseReleased
        // TODO add your handling code here:
        // TODO add your handling code here:
        try{
            
            int i,j;
            List<Node> listNode=Main.workingNetwork.nodesList();
            Iterator<Node> it = listNode.iterator();

            //Highlight in RBN
            List<Edge> listEdge = Main.workingNetwork.edgesList();
            Iterator<Edge> ite = listEdge.iterator();

            Main.workingNetwork.setSelectedEdgeState(listEdge,false);
            Main.workingNetwork.setSelectedNodeState(listNode,false);

            CyNetworkView curNetworkView = Cytoscape.getNetworkView(Main.workingNetwork.getIdentifier());
            curNetworkView.redrawGraph(true, true);

            it =listNode.iterator();
            ite = listEdge.iterator();

            int[] ri = this.tblResult.getSelectedRows();
            int k;

            while(it.hasNext()){
                Node anode=(Node)it.next();
                for(k=0;k<ri.length;k++){
                    for(i=1;i<tblResult.getColumnCount();i++){
                        if(this.tblResult.getValueAt(ri[k], i)!=null){
                            if(anode.getIdentifier().compareTo(this.tblResult.getValueAt(ri[k], i).toString())==0){
                                Main.workingNetwork.setSelectedNodeState(anode, true);
                                //JOptionPane.showMessageDialog(Cytoscape.getDesktop(), anode.getIdentifier());
                                break;
                            }
                        }
                    }
                }
            }


            while(ite.hasNext()){
                Edge aedge=(Edge)ite.next();
                for(k=0;k<ri.length;k++){
                    for(i=1;i<tblResult.getColumnCount();i++){
                        if(this.tblResult.getValueAt(ri[k], i)!=null){
                            if(aedge.getSource().getIdentifier().compareTo(this.tblResult.getValueAt(ri[k], i-1).toString())==0 && aedge.getTarget().getIdentifier().compareTo(this.tblResult.getValueAt(ri[k], i).toString())==0){
                                Main.workingNetwork.setSelectedEdgeState(aedge, true);
                                break;
                            }
                        }

                    }
                }
            }

            //CyNetworkView curNetworkView = Cytoscape.getCurrentNetworkView();
            curNetworkView.redrawGraph(true, true);

            
        }catch(Exception e){
            JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "Error: " + e.toString());
        }
    }//GEN-LAST:event_tblResultMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnFindFBL;
    public static javax.swing.JButton btnFindPath;
    private javax.swing.JButton btnShowFBLPath;
    public static javax.swing.JComboBox cboMaxFBLLength;
    public static javax.swing.JComboBox cboMaxPathLength;
    public static javax.swing.JCheckBox chkDistinctFBLOnly;
    public static javax.swing.JCheckBox chkFBLLength;
    public static javax.swing.JCheckBox chkFindCoupleFBL;
    public static javax.swing.JCheckBox chkFindFFLs;
    public static javax.swing.JCheckBox chkPathLength;
    private javax.swing.ButtonGroup grbFBL;
    private javax.swing.ButtonGroup grbPath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JLabel lblInfo;
    public static javax.swing.JLabel lblInfo1;
    public static javax.swing.JList lstFromNode;
    public static javax.swing.JList lstToNode;
    public static javax.swing.JTable tblResult;
    // End of variables declaration//GEN-END:variables

}

class ListModelex extends AbstractListModel {
    ArrayList a = new ArrayList();
    public ListModelex() {

    }
    public int getSize() {
        return a.size();
    }
    public Object getElementAt(int index) {
        return a.get((a.size()-1)-index);
            //se hien thi theo y do ma ban noi
    }
    //them mot item vao List
    public void addItem(String item){
        a.add(item);
        this.fireContentsChanged(item, 0, 1);
    }
}