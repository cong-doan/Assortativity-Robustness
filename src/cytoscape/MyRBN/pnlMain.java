/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * pnlTest.java
 *
 * Created on Apr 19, 2010, 9:24:22 PM
 */

package cytoscape.MyRBN;


import cytoscape.CyNetwork;


import cytoscape.Cytoscape;
import cytoscape.data.CyAttributes;
import cytoscape.task.ui.JTaskConfig;
import cytoscape.task.util.TaskManager;
import cytoscape.view.CyNetworkView;
import cytoscape.view.CytoscapeDesktop;
import cytoscape.view.cytopanels.CytoPanelImp;

import cytoscape.visual.EdgeAppearanceCalculator;
import cytoscape.visual.GlobalAppearanceCalculator;
import cytoscape.visual.NodeAppearanceCalculator;
import cytoscape.visual.VisualPropertyType;
import cytoscape.visual.VisualStyle;
import cytoscape.visual.calculators.BasicCalculator;
import cytoscape.visual.calculators.Calculator;
import cytoscape.visual.mappings.DiscreteMapping;
import cytoscape.visual.mappings.ObjectMapping;
import giny.model.Edge;

import giny.model.Node;
import giny.view.EdgeView;
import giny.view.NodeView;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import myrbn.MyRBN;
import java.awt.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Collection;
import java.util.Hashtable;
import java.util.Map.Entry;
import java.util.StringTokenizer;
import javax.swing.*;
import myrbn.MyOpenCL;
import myrbn.NodeInteraction;

/**
 *
 * @author Le Duc Hau
 */
public class pnlMain extends javax.swing.JPanel {

    //final static int interval = 100;
     Timer timer;
     int pbindex;
     

     ArrayList<Node> NonAttNodes = new ArrayList<Node>();
     ArrayList<Edge> NonAttEdges = new ArrayList<Edge>();
     List<Node> ln;
    
     //colin: add Nested canalyzing function
     private int updaterule = 2;
     
    public pnlMain() {
        initComponents();

        EventListener el = new EventListener();
        
        this.btnShowNetworkTransition.setVisible(false);
        this.txtNumOfRandomStates.setEnabled(false);

        //this.btnLoadNetwork.setVisible(false);
        //this.pnlLoadNetwork.setVisible(false);

        //pnlMain.lblNetworkSize.setText("Please load/generate a network...");

        Main.pnlMainLoaded=true;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grbState = new javax.swing.ButtonGroup();
        grbFunction = new javax.swing.ButtonGroup();
        grbNetworkTransition = new javax.swing.ButtonGroup();
        grbFBL = new javax.swing.ButtonGroup();
        grbRBNMethod = new javax.swing.ButtonGroup();
        radPerturbType = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        pnlFunction = new javax.swing.JPanel();
        radRandomFunction = new javax.swing.JRadioButton();
        radSpecifyFunction = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        cboRuleScheme = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        pnlState = new javax.swing.JPanel();
        radRandomState = new javax.swing.JRadioButton();
        radSpecifyState = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        radCurrentState = new javax.swing.JRadioButton();
        radAllPossibleState = new javax.swing.JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        btnShowNetworkTransition = new javax.swing.JButton();
        chkShowAttractor = new javax.swing.JCheckBox();
        lblAttractorFound = new javax.swing.JLabel();
        btnShowNetworkTransitionAdvance = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        radFunctionPerturb = new javax.swing.JRadioButton();
        radStatePerturb = new javax.swing.JRadioButton();
        btnFindImportance = new javax.swing.JButton();
        lblRobustnessFound = new javax.swing.JLabel();
        radSRandomStates = new javax.swing.JRadioButton();
        txtNumOfRandomStates = new javax.swing.JTextField();
        lblNetworkStatus = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(1044, 228));
        setMinimumSize(new java.awt.Dimension(1044, 249));

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Update Rules & Initial State Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        pnlFunction.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Update Rules", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 11))); // NOI18N
        pnlFunction.setMaximumSize(new java.awt.Dimension(700, 91));
        pnlFunction.setPreferredSize(new java.awt.Dimension(700, 91));

        grbFunction.add(radRandomFunction);
        radRandomFunction.setSelected(true);
        radRandomFunction.setText("Random");
        radRandomFunction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radRandomFunctionActionPerformed(evt);
            }
        });

        grbFunction.add(radSpecifyFunction);
        radSpecifyFunction.setText("Specific");
        radSpecifyFunction.setToolTipText("Choose a node/a set of node, then go to Node Attribute Browser panel to set Update-rule attribute");
        radSpecifyFunction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radSpecifyFunctionActionPerformed(evt);
            }
        });

        jLabel3.setText("Scheme");

        cboRuleScheme.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CONJ-DISJ", "CONJ", "DISJ" }));
        cboRuleScheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboRuleSchemeActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 2, 10));
        jLabel5.setText("<HTML>Note: 1 and 0 denote disjunction or conjunction </BR>functions of square or circle node, respectively</HTML>");

        javax.swing.GroupLayout pnlFunctionLayout = new javax.swing.GroupLayout(pnlFunction);
        pnlFunction.setLayout(pnlFunctionLayout);
        pnlFunctionLayout.setHorizontalGroup(
            pnlFunctionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFunctionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFunctionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFunctionLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(10, 10, 10)
                        .addComponent(cboRuleScheme, 0, 162, Short.MAX_VALUE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, 0, 0, Short.MAX_VALUE)
                    .addGroup(pnlFunctionLayout.createSequentialGroup()
                        .addComponent(radRandomFunction)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                        .addComponent(radSpecifyFunction)))
                .addContainerGap())
        );
        pnlFunctionLayout.setVerticalGroup(
            pnlFunctionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFunctionLayout.createSequentialGroup()
                .addGroup(pnlFunctionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboRuleScheme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFunctionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radRandomFunction)
                    .addComponent(radSpecifyFunction))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(320, 320, 320))
        );

        pnlState.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Initial State", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 11))); // NOI18N
        pnlState.setPreferredSize(new java.awt.Dimension(700, 91));

        grbState.add(radRandomState);
        radRandomState.setSelected(true);
        radRandomState.setText("Random");
        radRandomState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radRandomStateActionPerformed(evt);
            }
        });

        grbState.add(radSpecifyState);
        radSpecifyState.setText("Specific");
        radSpecifyState.setToolTipText("Choose a node/a set of node, then go to Node Attribute Browser panel to set State attribute");
        radSpecifyState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radSpecifyStateActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 10));
        jLabel2.setText("<HTML>Note: 1 and 0 denote \"on\" or \"off\" states of gray or light-gray node, respectively</HTML>");

        javax.swing.GroupLayout pnlStateLayout = new javax.swing.GroupLayout(pnlState);
        pnlState.setLayout(pnlStateLayout);
        pnlStateLayout.setHorizontalGroup(
            pnlStateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStateLayout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(pnlStateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlStateLayout.createSequentialGroup()
                        .addComponent(radRandomState)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(radSpecifyState))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnlStateLayout.setVerticalGroup(
            pnlStateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStateLayout.createSequentialGroup()
                .addGroup(pnlStateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radRandomState)
                    .addComponent(radSpecifyState))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 2, 10));
        jLabel4.setText("<HTML>\"Specific\" Options: Choose a node/a set of node, then go to Node Attribute Browser panel  to set Update-rule/State attribute.</HTML>");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(pnlState, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                        .addComponent(pnlFunction, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(pnlFunction, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlState, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Network Dynamics", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        jPanel1.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(0, 0));

        grbNetworkTransition.add(radCurrentState);
        radCurrentState.setSelected(true);
        radCurrentState.setText("Over the Specified State");
        radCurrentState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radCurrentStateActionPerformed(evt);
            }
        });

        grbNetworkTransition.add(radAllPossibleState);
        radAllPossibleState.setText("Over All Possible States");
        radAllPossibleState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radAllPossibleStateActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "State Transition Display", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 11))); // NOI18N
        jPanel5.setMaximumSize(new java.awt.Dimension(318, 91));
        jPanel5.setPreferredSize(new java.awt.Dimension(318, 91));
        jPanel5.setLayout(null);

        btnShowNetworkTransition.setText("Show");
        btnShowNetworkTransition.setMaximumSize(new java.awt.Dimension(67, 23));
        btnShowNetworkTransition.setMinimumSize(new java.awt.Dimension(67, 23));
        btnShowNetworkTransition.setPreferredSize(new java.awt.Dimension(67, 23));
        btnShowNetworkTransition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowNetworkTransitionActionPerformed(evt);
            }
        });
        jPanel5.add(btnShowNetworkTransition);
        btnShowNetworkTransition.setBounds(50, 40, 60, 23);

        chkShowAttractor.setText("Attractors Only");
        chkShowAttractor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowAttractorActionPerformed(evt);
            }
        });
        jPanel5.add(chkShowAttractor);
        chkShowAttractor.setBounds(10, 20, 160, 20);

        lblAttractorFound.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblAttractorFound.setForeground(new java.awt.Color(255, 0, 0));
        lblAttractorFound.setText("....");
        jPanel5.add(lblAttractorFound);
        lblAttractorFound.setBounds(20, 40, 100, 20);

        btnShowNetworkTransitionAdvance.setText("Show");
        btnShowNetworkTransitionAdvance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowNetworkTransitionAdvanceActionPerformed(evt);
            }
        });
        jPanel5.add(btnShowNetworkTransitionAdvance);
        btnShowNetworkTransitionAdvance.setBounds(120, 40, 80, 23);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Robustness Examination", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 11))); // NOI18N
        jPanel3.setLayout(null);

        radPerturbType.add(radFunctionPerturb);
        radFunctionPerturb.setText("Against Update-rule Mutation");
        radFunctionPerturb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radFunctionPerturbActionPerformed(evt);
            }
        });
        jPanel3.add(radFunctionPerturb);
        radFunctionPerturb.setBounds(10, 40, 170, 20);

        radPerturbType.add(radStatePerturb);
        radStatePerturb.setSelected(true);
        radStatePerturb.setText("Against Initial-state Mutation");
        jPanel3.add(radStatePerturb);
        radStatePerturb.setBounds(10, 20, 165, 20);

        btnFindImportance.setText("Examine");
        btnFindImportance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindImportanceActionPerformed(evt);
            }
        });
        jPanel3.add(btnFindImportance);
        btnFindImportance.setBounds(120, 60, 80, 23);

        lblRobustnessFound.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblRobustnessFound.setForeground(new java.awt.Color(255, 0, 0));
        lblRobustnessFound.setText("....");
        jPanel3.add(lblRobustnessFound);
        lblRobustnessFound.setBounds(20, 60, 80, 20);

        grbNetworkTransition.add(radSRandomStates);
        radSRandomStates.setText("Over # of random States");
        radSRandomStates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radSRandomStatesActionPerformed(evt);
            }
        });

        txtNumOfRandomStates.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNumOfRandomStates.setText("10");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radCurrentState, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(radSRandomStates, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtNumOfRandomStates, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(radAllPossibleState, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(radCurrentState, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radSRandomStates, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumOfRandomStates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(radAllPossibleState, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        lblNetworkStatus.setFont(new java.awt.Font("Tahoma", 1, 11));
        lblNetworkStatus.setForeground(new java.awt.Color(255, 0, 0));
        lblNetworkStatus.setText("Ready");
        lblNetworkStatus.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNetworkStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel7, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNetworkStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        add(jPanel2);
    }// </editor-fold>//GEN-END:initComponents

    private void radRandomStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radRandomStateActionPerformed
        // TODO add your handling code here:
        if(Main.ValidNetwork==true){
            MyRBN.setRandomInitialState();
            Common.updateCurrentNetworkInfo();
            Common.applyNetworkVisualStyle();
        }
    }//GEN-LAST:event_radRandomStateActionPerformed

    private void radSpecifyStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radSpecifyStateActionPerformed
        // TODO add your handling code here:
        CytoPanelImp ctrlPanel = (CytoPanelImp) Cytoscape.getDesktop().getCytoPanel(SwingConstants.SOUTH);
        ctrlPanel.setSelectedIndex(0);
    }//GEN-LAST:event_radSpecifyStateActionPerformed

    private void radRandomFunctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radRandomFunctionActionPerformed
        // TODO add your handling code here:
        if(Main.ValidNetwork==true){
            MyRBN.setRandomUpdateFunction();
            Common.updateCurrentNetworkInfo();
            Common.applyNetworkVisualStyle();
        }
    }//GEN-LAST:event_radRandomFunctionActionPerformed

    private void radSpecifyFunctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radSpecifyFunctionActionPerformed
        // TODO add your handling code here:
        CytoPanelImp ctrlPanel = (CytoPanelImp) Cytoscape.getDesktop().getCytoPanel(SwingConstants.SOUTH);
        ctrlPanel.setSelectedIndex(0);

    }//GEN-LAST:event_radSpecifyFunctionActionPerformed
    
  

    
    private void cboRuleSchemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboRuleSchemeActionPerformed
        // TODO add your handling code here:
        CyAttributes cyNetworkAttrs=  Cytoscape.getNetworkAttributes();
        String NetworkType;
        NetworkType=cyNetworkAttrs.getStringAttribute(Main.workingNetwork.getIdentifier(), "NetworkType");
        if(NetworkType==null){
            return;
        }

        if(this.cboRuleScheme.getSelectedIndex()==0){

            this.radRandomFunction.setEnabled(true);
            this.radSpecifyFunction.setEnabled(true);
            this.updaterule = 2;

        }else{

            this.radRandomFunction.setEnabled(false);
            this.radSpecifyFunction.setEnabled(false);
           
            this.radSpecifyFunction.setSelected(true);            
            if(this.cboRuleScheme.getSelectedIndex()==1){//Conjunction (AND)
                this.updaterule = 0;
            }else{//Disjunction (OR)
                this.updaterule = 1;
            }
            StringBuilder sb = new StringBuilder();
            for (int k = 0; k < MyRBN.nodes.size(); k++) {
                sb.append(String.valueOf(this.updaterule));
            }
            MyRBN.setUpdateFunction(sb.toString());
                    
            Common.updateCurrentNetworkInfo();
            Common.applyNetworkVisualStyle();
        }
    }//GEN-LAST:event_cboRuleSchemeActionPerformed

    private void btnShowNetworkTransitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowNetworkTransitionActionPerformed
        // TODO add your handling code here:
        try{

            Main.workingNetwork = Cytoscape.getCurrentNetwork();
            Main.workingNetworkView = Cytoscape.getNetworkView(Main.workingNetwork.getIdentifier());
            //Add network properties
            CyAttributes cyNetworkAttrs=  Cytoscape.getNetworkAttributes();
            String NetworkType;
            NetworkType=cyNetworkAttrs.getStringAttribute(Main.workingNetwork.getIdentifier(), "NetworkType");
            if(NetworkType!=null){
                if(NetworkType.compareToIgnoreCase("Transition")==0 || NetworkType.compareToIgnoreCase("MOTIF")==0){
                    JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "You should choose a RBN/Signaling/Regulatory network first!");
                    return;
                }
            }

            // colin edit for OpenCL
            if(MyRBN.nodes!=null & MyRBN.rndina!=null){
                Common.preprocessInteractionList(MyRBN.rndina, "NodeDst");
                Common.sortQuickInteractionListInAsc(MyRBN.rndina);
            }
            /**/
            
            ShowNetworkTransitionTask task= new ShowNetworkTransitionTask();

            // Configure JTask Dialog Pop-Up Box
            JTaskConfig jTaskConfig = new JTaskConfig();
            jTaskConfig.setOwner(Cytoscape.getDesktop());
            jTaskConfig.displayCloseButton(false);

            jTaskConfig.displayCancelButton(true);

            jTaskConfig.displayStatus(true);

            jTaskConfig.setAutoDispose(true);

            // Execute Task in New Thread; pops open JTask Dialog Box.
            TaskManager.executeTask(task, jTaskConfig);
            
        }catch(Exception e){
            //JOptionPane.showMessageDialog(Cytoscape.getDesktop(),"Error: " + e.getMessage());
        }
        finally
        {
            // release memory
            System.gc();
            // end release
        }
}//GEN-LAST:event_btnShowNetworkTransitionActionPerformed

    private void chkShowAttractorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowAttractorActionPerformed
        // TODO add your handling code here:

        CyNetwork curNetwork = Cytoscape.getCurrentNetwork();
        CyNetworkView curView=Cytoscape.getNetworkView(curNetwork.getIdentifier());

        CyAttributes cyNetworkAttrs=  Cytoscape.getNetworkAttributes();
        String NetworkType;
        NetworkType=cyNetworkAttrs.getStringAttribute(curNetwork.getIdentifier(), "NetworkType");
        if(NetworkType==null) return;
        if(NetworkType!=null){
            if(NetworkType.compareToIgnoreCase("Transition")!=0){
                return;
            }
        }
        int i,j;

        curNetwork.setSelectedNodeState((Collection)curNetwork.nodesList(), false);
        //curNetwork.setSelectedEdgeState((Collection)curNetwork.edgesList(), false);

        if(pnlMain.chkShowAttractor.isSelected()==true){
            ArrayList<Node> SelectedNodes = new ArrayList<Node>();
            for(i=0;i<curNetwork.nodesList().size();i++){
                Node n=(Node)curNetwork.nodesList().get(i);
                int att = Cytoscape.getNodeAttributes().getIntegerAttribute(n.getIdentifier(), "Attractor");
                if(att==0){
                    SelectedNodes.add(n);
                    //curNetwork.hideNode(n);
                }
            }
            //JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "Hello 1");
            curNetwork.setSelectedNodeState(SelectedNodes, true);
            //            for(i=0;i<curNetwork.edgesList().size();i++){
            //                Edge e=(Edge)curNetwork.edgesList().get(i);
            //                int att = Cytoscape.getEdgeAttributes().getIntegerAttribute(e.getIdentifier(), "Attractor");
            //                if(att==0){
            //                    curNetwork.setSelectedEdgeState(e, true);
            //                    //curNetwork.hideEdge(e);
            //                }
            //            }
            //JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "Hello 2");
            //            curView.hideGraphObject(curView.getSelectedNodes());
            //            curView.hideGraphObject(curView.getSelectedEdges());

            for (Iterator it = curView.getSelectedNodes().iterator(); it.hasNext();) {
                NodeView nview = (NodeView) it.next();
                curView.hideGraphObject(nview);
            }

            curView.updateView();

        }else{
            for (Iterator it = curView.getNodeViewsIterator(); it.hasNext();) {
                NodeView nview = (NodeView) it.next();
                curView.showGraphObject(nview);
            }

            for (Iterator ei = curView.getEdgeViewsList().iterator(); ei.hasNext();) {
                EdgeView eview = (EdgeView) ei.next();
                curView.showGraphObject(eview);
            }
            curView.updateView();
        }
}//GEN-LAST:event_chkShowAttractorActionPerformed

    private void btnShowNetworkTransitionAdvanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowNetworkTransitionAdvanceActionPerformed
        // TODO add your handling code here:
        try{
        if(Main.workingNetwork==null || Main.workingNetwork.nodesList().size()==0){
            JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "You should import/generate/select a network first");
            return;
        }
        
        Main.ValidNetwork = Common.readCurrentNetworkInfo();
        Common.updateForm();
        if(Main.ValidNetwork==true){
            pnlMain.lblNetworkStatus.setText("<HTML>Current Network: " + Main.workingNetwork.getTitle() + "<BR>Size: |V|=" + Main.workingNetwork.nodesList().size() + ", |A|=" + Main.workingNetwork.edgesList().size() + "</HTML>");
        }else{
            pnlMain.lblNetworkStatus.setText("<HTML>Current Network: " + Main.workingNetwork.getTitle() + "<BR>Invalid. Interaction should only contain 1, 0, or -1</HTML>");
            JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "Invalid Network. Interaction should only contain 1, 0, or -1", "Notice",JOptionPane.ERROR_MESSAGE);
            return;
        }
                

        long NumOfAllPossibleStates = (long)Math.pow((double)2,(double)MyRBN.nodes.size());
        if(this.radSRandomStates.isSelected()){
            if(Integer.parseInt(this.txtNumOfRandomStates.getText())<1||Integer.parseInt(this.txtNumOfRandomStates.getText())>NumOfAllPossibleStates-1){
                JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "Number of random states should be between 1 and " + (NumOfAllPossibleStates-1),"Notice",JOptionPane.WARNING_MESSAGE);
                return;
            }
        }


        if(this.radAllPossibleState.isSelected()){
            if(MyRBN.nodes.size()>=20){
                if(JOptionPane.showConfirmDialog(Cytoscape.getDesktop(), "There are " + NumOfAllPossibleStates + " possible states corresponding to " + MyRBN.nodes.size() + " nodes need to be examined.\nThis is very large for this task due to memory and time (Number of network nodes should be less than 20 for this task).\nOption 'Over # of random States' should be chosen\nDo you still want to do this?","Notice",JOptionPane.YES_NO_OPTION)==JOptionPane.NO_OPTION){
                    return;
                }
            }
        }
        //ShowNetworkTransitionTaskNew task= new ShowNetworkTransitionTaskNew();
        /*if(MyRBN.nodes!=null & MyRBN.rndina!=null){
            Common.preprocessInteractionList(MyRBN.rndina, "NodeDst");
            Common.sortQuickInteractionListInAsc(MyRBN.rndina);

            Common.in = new Hashtable<String, ArrayList<NodeInteraction>>();
            for(int n=0;n< MyRBN.nodes.size();n++){
                ArrayList<Integer> posarr1 = Common.searchUsingBinaryInteraction(MyRBN.nodes.get(n).NodeID, MyRBN.rndina);
                if(posarr1!=null && posarr1.size()>0){
                    ArrayList<NodeInteraction> ni=new ArrayList<NodeInteraction>();
                    for(int i=0;i<posarr1.size();i++){
                        //Find State of MyRBN.rndina.get(posarr1.get(i)).NodeSrc
                        
                        ni.add(new NodeInteraction(MyRBN.rndina.get(posarr1.get(i)).NodeSrc, MyRBN.rndina.get(posarr1.get(i)).InteractionType));
                    }
                    Common.in.put(MyRBN.nodes.get(n).NodeID, ni);
                }
            }
        }*/
        //colin: add Nested canalyzing function
        System.out.println("colin: ShowNetworkTransitionTask: updaterule = " + updaterule);
        myrbn.Node.createUpdateRules(this.updaterule);
        /**/
        ShowNetworkTransitionTask task= new ShowNetworkTransitionTask();

        // Configure JTask Dialog Pop-Up Box
        //MyOpenCL.showMemory("Before ATT:");
        JTaskConfig jTaskConfig = new JTaskConfig();
        jTaskConfig.setOwner(Cytoscape.getDesktop());
        jTaskConfig.displayCloseButton(false);

        jTaskConfig.displayCancelButton(true);

        jTaskConfig.displayStatus(true);

        jTaskConfig.setAutoDispose(true);

//        System.out.println("Hello 1");
        // Execute Task in New Thread; pops open JTask Dialog Box.
        long timeStart = System.currentTimeMillis();
        TaskManager.executeTask(task, jTaskConfig);

        if(!task.error)
        {
//        System.out.println("Number of attractors: " + MyRBN.AllAttractors.size());
        if(!MyOpenCL.USE_OPENCL)
            lblAttractorFound.setText("Found: " + MyRBN.AllAttractors.size());

        Common.updateCurrentNetworkInfo();
        Common.applyNetworkVisualStyle();

        CyNetwork cyNetwork = Cytoscape.getCurrentNetwork();
        CyNetworkView cyNetworkView = Cytoscape.getNetworkView(cyNetwork.getIdentifier());

        String NetworkType=Cytoscape.getNetworkAttributes().getStringAttribute(cyNetwork.getIdentifier(), "NetworkType");
        if(NetworkType!=null){
            if(NetworkType.compareToIgnoreCase("Transition")==0){
                //System.out.println("Transition Network");
                Common.applyNetworkTransitionVisualStyle(cyNetwork,cyNetworkView);
            }else{
                //System.out.println("RBN or Signaling Network");
                Common.applyNetworkVisualStyle();
            }
        }

        long timeEnd = System.currentTimeMillis();
        JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "Time = " + (timeEnd-timeStart)/1000);
        }
        else
        {
            JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "Error while performing network transition: " + task.errMsgs);
        }

        

        //        }catch(Exception e){
        //            JOptionPane.showMessageDialog(Cytoscape.getDesktop(),"Error: " + e.getMessage());
        //        }
        }
        finally
        {
            // release memory
            if (MyRBN.AllAttractors != null) {
                /*int size = MyRBN.AllAttractors.size();
                for(int i=0;i<size;i++)
                {
                    MyRBN.AllAttractors.get(i).States.clear();
                    MyRBN.AllAttractors.get(i).States = null;
                }*/
                
                MyRBN.AllAttractors.clear();
                MyRBN.AllAttractors = null;
            }

            if (MyRBN.Transitions != null) {
                MyRBN.Transitions.clear();
                MyRBN.Transitions = null;
            }

            System.gc();
            // end release
            //MyOpenCL.showMemory("After ATT:");
        }
}//GEN-LAST:event_btnShowNetworkTransitionAdvanceActionPerformed

    private void btnFindImportanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindImportanceActionPerformed
        // TODO add your handling code here:
        try{
            
//            CyAttributes cyNetworkAttrs=  Cytoscape.getNetworkAttributes();
//            String NetworkType;
//            NetworkType=cyNetworkAttrs.getStringAttribute(Cytoscape.getCurrentNetwork().getIdentifier(), "NetworkType");
//            if(NetworkType!=null){
//                if(NetworkType.compareToIgnoreCase("Transition")!=0 && NetworkType.compareToIgnoreCase("MOTIF")!=0){//Generated Networks
//                    Main.workingNetwork = Cytoscape.getCurrentNetwork();
//                    Main.workingNetworkView = Cytoscape.getNetworkView(Main.workingNetwork.getIdentifier());
//                }
//            }else{//Imported Networks
//                Main.workingNetwork = Cytoscape.getCurrentNetwork();
//                Main.workingNetworkView = Cytoscape.getNetworkView(Main.workingNetwork.getIdentifier());
//            }
//
//            Main.ValidNetwork = Common.readCurrentNetworkInfo();
            // colin update NetDSpar
            Main.AllPossibleFunc=false;
            /**/
            
            if(Main.workingNetwork==null || Main.workingNetwork.nodesList().size()==0){
                JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "You should import/generate/select a network first");
                return;
            }

            Main.ValidNetwork = Common.readCurrentNetworkInfo();
            Common.updateForm();
            if(Main.ValidNetwork==true){
                pnlMain.lblNetworkStatus.setText("<HTML>Current Network: " + Main.workingNetwork.getTitle() + "<BR>Size: |V|=" + Main.workingNetwork.nodesList().size() + ", |A|=" + Main.workingNetwork.edgesList().size() + "</HTML>");
                Common.applyNetworkVisualStyle();
            }else{
                pnlMain.lblNetworkStatus.setText("<HTML>Current Network: " + Main.workingNetwork.getTitle() + "<BR>Invalid. Interaction should only contain 1, 0, or -1</HTML>");
                JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "Invalid Network. Interaction should only contain 1, 0, or -1", "Notice",JOptionPane.ERROR_MESSAGE);
                return;
            }

            
            if(Main.workingNetwork.getSelectedNodes().size()<=0){
                JOptionPane.showMessageDialog(Cytoscape.getDesktop(),"You have to select at least one node to check","Notice",JOptionPane.WARNING_MESSAGE);
                return;
            }

            
            long NumOfAllPossibleStates = (long)Math.pow((double)2,(double)MyRBN.nodes.size());

            if(this.radAllPossibleState.isSelected()){
                if(MyRBN.nodes.size()>=20){
                    if(JOptionPane.showConfirmDialog(Cytoscape.getDesktop(), "There are " + NumOfAllPossibleStates + " possible states corresponding to " + MyRBN.nodes.size() + " nodes need to be examined.\nThis is very large for this task due to memory and time (Number of network nodes should be less than 20 for this task).\nOption 'Over # of random States' should be chosen\nDo you still want to do this?","Notice",JOptionPane.YES_NO_OPTION)==JOptionPane.NO_OPTION){
                        return;
                    }
                }
                /*Main.AllPossibleFunc=false;
                int ans = JOptionPane.showConfirmDialog(Cytoscape.getDesktop(), "Do you want to examine over all update-rule combinations?", "Notice", JOptionPane.YES_NO_OPTION);
                if(ans==JOptionPane.YES_OPTION){
                    Main.AllPossibleFunc=true;
                }else{
                    Main.AllPossibleFunc=false;
                }*///colin: add Nested canalyzing function
            }


            /*if(MyRBN.nodes!=null & MyRBN.rndina!=null){
                Common.preprocessInteractionList(MyRBN.rndina, "NodeDst");
                Common.sortQuickInteractionListInAsc(MyRBN.rndina);

                Common.in = new Hashtable<String, ArrayList<NodeInteraction>>();
                for(int n=0;n< MyRBN.nodes.size();n++){
                    ArrayList<Integer> posarr1 = Common.searchUsingBinaryInteraction(MyRBN.nodes.get(n).NodeID, MyRBN.rndina);
                    if(posarr1!=null && posarr1.size()>0){
                        ArrayList<NodeInteraction> ni=new ArrayList<NodeInteraction>();
                        for(int i=0;i<posarr1.size();i++){
                            //Find State of MyRBN.rndina.get(posarr1.get(i)).NodeSrc
                            int pos = Common.searchUsingBinaryGENE(MyRBN.rndina.get(posarr1.get(i)).NodeSrc, MyRBN.nodes);
                            ni.add(new NodeInteraction(MyRBN.rndina.get(posarr1.get(i)).NodeSrc, MyRBN.nodes.get(pos).NodeState, MyRBN.rndina.get(posarr1.get(i)).InteractionType));
                        }
                        Common.in.put(MyRBN.nodes.get(n).NodeID, ni);
                    }
                }
            }*/
            //colin: add Nested canalyzing function
            System.out.println("colin: calRobustness: updaterule = " + updaterule);
            myrbn.Node.createUpdateRules(this.updaterule);
            /**/

            // colin edit for OpenCL
            /*if(MyRBN.nodes!=null & MyRBN.rndina!=null){
                Common.preprocessInteractionList(MyRBN.rndina, "NodeDst");
                Common.sortQuickInteractionListInAsc(MyRBN.rndina);
            }*/
            /**/
            
            //CalculateRobustnessTaskNew task= new CalculateRobustnessTaskNew();

            CalculateRobustnessTask task= new CalculateRobustnessTask();

            // Configure JTask Dialog Pop-Up Box
            //MyOpenCL.showMemory("Before ATT:");
            JTaskConfig jTaskConfig = new JTaskConfig();
            jTaskConfig.setOwner(Cytoscape.getDesktop());
            jTaskConfig.displayCloseButton(false);

            jTaskConfig.displayCancelButton(true);

            jTaskConfig.displayStatus(true);

            jTaskConfig.setAutoDispose(true);

            // Execute Task in New Thread; pops open JTask Dialog Box.
            long timeStart = System.currentTimeMillis();
            //Cytoscape.getDesktop().invalidate();
            TaskManager.executeTask(task, jTaskConfig);

            if(!task.error)
            {
                long timeEnd = System.currentTimeMillis();
                float time = (float)(timeEnd-timeStart)/1000;
                System.out.printf("colin: Time to cal robustness=%f\n", time);

                // Select the panel after finish robustness calculation
		int indexInCytoPanel = AddPanelAction.ctrlPanel5.indexOfComponent("NetDSpar Indicator");
		AddPanelAction.ctrlPanel5.setSelectedIndex(indexInCytoPanel);
                
            if(this.radCurrentState.isSelected()){
                //JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "Number of robust nodes is " + CalculateRobustnessTaskNew.NumOfRobustNodes);
                String msg = "Number of robust nodes is " + CalculateRobustnessTask.NumOfRobustNodes;
                msg = msg.concat("\nTime = " + time);
                JOptionPane.showMessageDialog(Cytoscape.getDesktop(), msg);
            }else{
                String msg = "Summary of robustnesses of all selected nodes:\n" + Main.RobustnessMessage;
                msg = msg.concat("Time = " + time);
                JOptionPane.showMessageDialog(Cytoscape.getDesktop(), msg);
            }
            }
            else
            {
                JOptionPane.showMessageDialog(Cytoscape.getDesktop(), "Error while finding robustness: " + task.errMsgs);
            }

            
        }catch(Exception e){
            JOptionPane.showMessageDialog(Cytoscape.getDesktop(),"Error: " + e.getMessage());
        }
        finally
        {
            // release memory
            System.gc();
            // end release
            //MyOpenCL.showMemory("After ATT:");
        }
}//GEN-LAST:event_btnFindImportanceActionPerformed

    private void radFunctionPerturbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radFunctionPerturbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radFunctionPerturbActionPerformed

    private void radAllPossibleStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radAllPossibleStateActionPerformed
        // TODO add your handling code here:
        pnlMain.pnlState.setEnabled(false);
        
        pnlMain.radRandomState.setEnabled(false);
        pnlMain.radSpecifyState.setEnabled(false);
        
        txtNumOfRandomStates.setEnabled(false);
    }//GEN-LAST:event_radAllPossibleStateActionPerformed

    private void radCurrentStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radCurrentStateActionPerformed
        // TODO add your handling code here:
        pnlMain.pnlState.setEnabled(true);
        
        pnlMain.radRandomState.setEnabled(true);
        pnlMain.radSpecifyState.setEnabled(true);
        
        txtNumOfRandomStates.setEnabled(false);
    }//GEN-LAST:event_radCurrentStateActionPerformed

    private void radSRandomStatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radSRandomStatesActionPerformed
        // TODO add your handling code here:
        pnlMain.pnlState.setEnabled(false);
        
        pnlMain.radRandomState.setEnabled(false);
        pnlMain.radSpecifyState.setEnabled(false);
        
        txtNumOfRandomStates.setEnabled(true);
    }//GEN-LAST:event_radSRandomStatesActionPerformed

    
    VisualStyle createVisualStyle(CyNetwork network){
       
        NodeAppearanceCalculator nodeAppCalc = new NodeAppearanceCalculator();
        EdgeAppearanceCalculator edgeAppCalc = new EdgeAppearanceCalculator();
        GlobalAppearanceCalculator globalAppCalc = new GlobalAppearanceCalculator();

        //Node settings
        DiscreteMapping disMapping = new DiscreteMapping(Color.YELLOW, ObjectMapping.NODE_MAPPING);
//        ContinuousMapping continuousMapping = new ContinuousMapping(Color.YELLOW);
        disMapping.setControllingAttributeName("Attractor", network, false);
        disMapping.putMapValue(new Integer(1), Color.GREEN);
        disMapping.putMapValue(new Integer(0), Color.MAGENTA);
        //disMapping.putMapValue(null, Color.RED);
        Calculator nodeColorCalculator = new BasicCalculator("Example Node Color Calc", disMapping,VisualPropertyType.NODE_FILL_COLOR);
        nodeAppCalc.setCalculator(nodeColorCalculator);

        //Edge settings
        disMapping = new DiscreteMapping(Color.YELLOW, ObjectMapping.NODE_MAPPING);
        disMapping = new DiscreteMapping(Color.YELLOW,ObjectMapping.EDGE_MAPPING);
        disMapping.setControllingAttributeName("Attractor", network, false);
        disMapping.putMapValue(new Integer(1), Color.GREEN);
        disMapping.putMapValue(new Integer(0), Color.MAGENTA);
        Calculator edgeColorCalculator = new BasicCalculator("Example Edge Color Calc", disMapping,VisualPropertyType.EDGE_COLOR);
        edgeAppCalc.setCalculator(edgeColorCalculator);
            
        VisualStyle visualStyle = new VisualStyle(Common.vsNetworkTransitionName,nodeAppCalc, edgeAppCalc, globalAppCalc);
        return visualStyle;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnFindImportance;
    private javax.swing.JButton btnShowNetworkTransition;
    public static javax.swing.JButton btnShowNetworkTransitionAdvance;
    private javax.swing.JComboBox cboRuleScheme;
    public static javax.swing.JCheckBox chkShowAttractor;
    private javax.swing.ButtonGroup grbFBL;
    private javax.swing.ButtonGroup grbFunction;
    private javax.swing.ButtonGroup grbNetworkTransition;
    private javax.swing.ButtonGroup grbRBNMethod;
    private javax.swing.ButtonGroup grbState;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    public static javax.swing.JLabel lblAttractorFound;
    public static javax.swing.JLabel lblNetworkStatus;
    public static javax.swing.JLabel lblRobustnessFound;
    private javax.swing.JPanel pnlFunction;
    public static javax.swing.JPanel pnlState;
    public static javax.swing.JRadioButton radAllPossibleState;
    public static javax.swing.JRadioButton radCurrentState;
    public static javax.swing.JRadioButton radFunctionPerturb;
    private javax.swing.ButtonGroup radPerturbType;
    private javax.swing.JRadioButton radRandomFunction;
    public static javax.swing.JRadioButton radRandomState;
    public static javax.swing.JRadioButton radSRandomStates;
    private javax.swing.JRadioButton radSpecifyFunction;
    public static javax.swing.JRadioButton radSpecifyState;
    public static javax.swing.JRadioButton radStatePerturb;
    public static javax.swing.JTextField txtNumOfRandomStates;
    // End of variables declaration//GEN-END:variables

}
