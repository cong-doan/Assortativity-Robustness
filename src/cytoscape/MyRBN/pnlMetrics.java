/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * pnlMetrics.java
 *
 * Created on Jun 29, 2012, 4:50:25 PM
 */

package cytoscape.MyRBN;

import cytoscape.Cytoscape;
import cytoscape.data.CyAttributes;
import cytoscape.task.ui.JTaskConfig;
import cytoscape.task.util.TaskManager;
import giny.model.Edge;
import giny.model.Node;
import java.awt.Component;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import modularity.OptimizerModularity;
import myrbn.Interaction;
import myrbn.MyRBN;
import static myrbn.MyRBN.NumOfIna;
import static myrbn.MyRBN.NumOfNode;
import static myrbn.MyRBN.nodes;
import static myrbn.MyRBN.rndina;

/**
 *
 * @author Trinh Hung Cuong
 */
public class pnlMetrics extends javax.swing.JPanel {
    public static final boolean USE_FORCING_ERROR_MODE = false;    
    
    /** Creates new form pnlMetrics */
    List<JCheckBox> cbMetrics = new ArrayList<JCheckBox>();
    
    public pnlMetrics() {
        initComponents();

        // set list checkboxes
        //this.cbSpb.setVisible(false);        
        for( Component comp : pnlMetrics.getComponents() ) {
            if( comp instanceof JCheckBox)
                if((JCheckBox)comp != cbAll /*&& (JCheckBox)comp != cbSpb*/)
                    cbMetrics.add( (JCheckBox)comp );
        }        
        
        if(Config.USE_PINF == false) {
            this.cbPINF.setSelected(false);
            this.cbPINF.setEnabled(false);
            this.cbPStructure.setSelected(false);
            this.cbPStructure.setEnabled(false);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pnlMetrics = new javax.swing.JPanel();
        btnCal = new javax.swing.JButton();
        cbAll = new javax.swing.JCheckBox();
        cbDeg = new javax.swing.JCheckBox();
        cbCloseness = new javax.swing.JCheckBox();
        cbSpb = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        cbEigenvector = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        txtNumStates = new javax.swing.JTextField();
        cbBSU = new javax.swing.JCheckBox();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        txtNumRules = new javax.swing.JTextField();
        cbKOEdge_attractors = new javax.swing.JCheckBox();
        jSeparator4 = new javax.swing.JSeparator();
        cbEdgeDeg = new javax.swing.JCheckBox();
        cbEdgeBEW = new javax.swing.JCheckBox();
        cbEdgeNuFBL = new javax.swing.JCheckBox();
        txtMaxLengthFBL = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cbKnockout = new javax.swing.JCheckBox();
        cbOverExpression = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        txtMutationTime = new javax.swing.JTextField();
        cbPINF = new javax.swing.JCheckBox();
        cbPStructure = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        txtR = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        chkremoverandomedges = new javax.swing.JCheckBox();
        chkremoveedgebetweenmodule = new javax.swing.JCheckBox();
        chkremovefbldeb = new javax.swing.JCheckBox();
        chkremoverandomedgesinoutr = new javax.swing.JCheckBox();
        chkremovebetweeninsidemoduleinoutmodule = new javax.swing.JCheckBox();
        chkremoveedgesbiggestsmallermoduleedges = new javax.swing.JCheckBox();
        chkremoveedgesbiggestsmallermodulenodes = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtnoedges = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtmodularitytimes = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtpair = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtpercentbetweenmodule = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtpercentinsidemodule = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtStates = new javax.swing.JTextField();
        txtremovepercentage = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblanalyzingnetwork = new javax.swing.JLabel();
        chktimes = new javax.swing.JCheckBox();

        pnlMetrics.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Calculate Centralities"));

        btnCal.setText("Calculate");
        btnCal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalActionPerformed(evt);
            }
        });

        cbAll.setText("All");
        cbAll.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbAllItemStateChanged(evt);
            }
        });

        cbDeg.setSelected(true);
        cbDeg.setText("Degree");
        cbDeg.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbDegItemStateChanged(evt);
            }
        });

        cbCloseness.setText("Closeness");
        cbCloseness.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbClosenessItemStateChanged(evt);
            }
        });

        cbSpb.setText("Shortest path betweeness & stress");
        cbSpb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbSpbItemStateChanged(evt);
            }
        });

        jSeparator2.setForeground(new java.awt.Color(0, 204, 51));

        cbEigenvector.setText("Eigenvector");
        cbEigenvector.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbEigenvectorItemStateChanged(evt);
            }
        });

        jLabel1.setText("Number of initial-states:");

        txtNumStates.setText("100");

        cbBSU.setText("BSU");
        cbBSU.setToolTipText("Boolean sensitivity");
        cbBSU.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbBSUItemStateChanged(evt);
            }
        });

        jSeparator3.setForeground(new java.awt.Color(0, 204, 51));

        jLabel2.setText("Number of update-rules:");

        txtNumRules.setText("1");

        cbKOEdge_attractors.setText("Edgetic sensitivity");
        cbKOEdge_attractors.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbKOEdge_attractorsItemStateChanged(evt);
            }
        });

        jSeparator4.setForeground(new java.awt.Color(0, 204, 51));

        cbEdgeDeg.setSelected(true);
        cbEdgeDeg.setText("Edge Degree");
        cbEdgeDeg.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbEdgeDegItemStateChanged(evt);
            }
        });

        cbEdgeBEW.setSelected(true);
        cbEdgeBEW.setText("Edge Betweenness");
        cbEdgeBEW.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbEdgeBEWItemStateChanged(evt);
            }
        });

        cbEdgeNuFBL.setSelected(true);
        cbEdgeNuFBL.setText("Edge' NuFBLs");
        cbEdgeNuFBL.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbEdgeNuFBLItemStateChanged(evt);
            }
        });

        txtMaxLengthFBL.setText("9");

        jLabel3.setText("Length:");

        cbKnockout.setText("Knockout robustness");
        cbKnockout.setToolTipText("Boolean sensitivity");
        cbKnockout.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbKnockoutItemStateChanged(evt);
            }
        });

        cbOverExpression.setText("Over-expression robustness");
        cbOverExpression.setToolTipText("Boolean sensitivity");
        cbOverExpression.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbOverExpressionItemStateChanged(evt);
            }
        });

        jLabel4.setText("Mutation time:");

        txtMutationTime.setText("1000");

        cbPINF.setSelected(true);
        cbPINF.setText("P-Influence");
        cbPINF.setToolTipText("Boolean sensitivity");

        cbPStructure.setSelected(true);
        cbPStructure.setText("P-Structure");
        cbPStructure.setToolTipText("Boolean sensitivity");

        jLabel11.setText("R:");

        txtR.setText("-0.05");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Various type of removal edges"));

        chkremoverandomedges.setSelected(true);
        chkremoverandomedges.setText("Remove random edges");

        chkremoveedgebetweenmodule.setText("Remove edges between & inside modules");

        chkremovefbldeb.setText("Remove edges desecding d, fbl, and eb in");

        chkremoverandomedgesinoutr.setText("Remove random edges (include in/out-module)");

        chkremovebetweeninsidemoduleinoutmodule.setText("Remove edges between & inside module (in/out module)");

        chkremoveedgesbiggestsmallermoduleedges.setText("Remove edges in biggest and smaller module(edges)");

        chkremoveedgesbiggestsmallermodulenodes.setText("Remove edges in biggest and smaller modules(nodes)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(chkremoverandomedges, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(chkremovefbldeb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chkremoverandomedgesinoutr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chkremoveedgebetweenmodule, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(chkremovebetweeninsidemoduleinoutmodule)
                    .addComponent(chkremoveedgesbiggestsmallermoduleedges)
                    .addComponent(chkremoveedgesbiggestsmallermodulenodes))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkremoverandomedges)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkremoveedgebetweenmodule)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkremovefbldeb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkremoverandomedgesinoutr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkremovebetweeninsidemoduleinoutmodule)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkremoveedgesbiggestsmallermoduleedges)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chkremoveedgesbiggestsmallermodulenodes))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));

        jLabel5.setText("No.Edeges");

        txtnoedges.setText("2");

        jLabel6.setText("No.of module detection");

        txtmodularitytimes.setText("10");

        jLabel9.setText("No edges remove randomly");

        jLabel12.setText("% of edges between");

        txtpercentbetweenmodule.setText("50");

        jLabel13.setText("inside");

        txtpercentinsidemodule.setText("50");

        jLabel10.setText("No. of states:");

        txtStates.setText("1000");

        jLabel8.setText("No of edges remove high d, fbl, and eb");

        lblanalyzingnetwork.setText("Analyzing.....");

        chktimes.setSelected(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtmodularitytimes, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtnoedges, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtremovepercentage)
                                    .addComponent(txtStates, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(chktimes, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtpair, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtpercentbetweenmodule, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtpercentinsidemodule, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblanalyzingnetwork, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtnoedges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtmodularitytimes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtpair, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtpercentbetweenmodule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(txtpercentinsidemodule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chktimes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtStates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtremovepercentage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblanalyzingnetwork)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlMetricsLayout = new javax.swing.GroupLayout(pnlMetrics);
        pnlMetrics.setLayout(pnlMetricsLayout);
        pnlMetricsLayout.setHorizontalGroup(
            pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMetricsLayout.createSequentialGroup()
                .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMetricsLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtR, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(726, 726, 726))
                    .addGroup(pnlMetricsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMetricsLayout.createSequentialGroup()
                                .addComponent(cbKnockout)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbPINF))
                            .addGroup(pnlMetricsLayout.createSequentialGroup()
                                .addComponent(cbBSU)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtNumStates, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlMetricsLayout.createSequentialGroup()
                                .addComponent(cbAll)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCal))
                            .addGroup(pnlMetricsLayout.createSequentialGroup()
                                .addComponent(cbOverExpression)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbPStructure))
                            .addGroup(pnlMetricsLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(pnlMetricsLayout.createSequentialGroup()
                                .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMetricsLayout.createSequentialGroup()
                                        .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(pnlMetricsLayout.createSequentialGroup()
                                                .addGap(24, 24, 24)
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtMaxLengthFBL, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(cbEdgeNuFBL, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(pnlMetricsLayout.createSequentialGroup()
                                                    .addComponent(cbEdgeDeg)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(cbEdgeBEW))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMetricsLayout.createSequentialGroup()
                                                .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cbDeg)
                                                    .addComponent(cbCloseness))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cbEigenvector)
                                                    .addComponent(cbSpb)))))
                                    .addGroup(pnlMetricsLayout.createSequentialGroup()
                                        .addComponent(cbKOEdge_attractors)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(81, 81, 81))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMetricsLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(pnlMetricsLayout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtMutationTime, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlMetricsLayout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtNumRules, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(28, 28, 28)))
                .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 328, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        pnlMetricsLayout.setVerticalGroup(
            pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMetricsLayout.createSequentialGroup()
                .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMetricsLayout.createSequentialGroup()
                        .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbAll)
                            .addComponent(btnCal))
                        .addGap(18, 18, 18)
                        .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbBSU)
                            .addComponent(jLabel1)
                            .addComponent(txtNumStates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlMetricsLayout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtNumRules, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtMutationTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbKnockout)
                    .addComponent(cbPINF))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbOverExpression)
                    .addComponent(cbPStructure))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbKOEdge_attractors)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMetricsLayout.createSequentialGroup()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbEdgeDeg)
                            .addComponent(cbEdgeBEW)))
                    .addComponent(cbDeg)
                    .addGroup(pnlMetricsLayout.createSequentialGroup()
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbSpb)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbEdgeNuFBL)
                    .addComponent(cbCloseness)
                    .addComponent(cbEigenvector))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtMaxLengthFBL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(pnlMetricsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMetrics, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMetrics, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalActionPerformed
        try {
            boolean existsMetric = false;
            for(JCheckBox cb:cbMetrics) {
                if(cb.isSelected())
                {
                    existsMetric = true;
                    break;
                }
            }
            if(!existsMetric)
            {
                JOptionPane.showMessageDialog(Cytoscape.getDesktop(),"None selected metrics!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            CalMetricsTask task= new CalMetricsTask(this, null, new Output());
            task.setNetworkID(0);
            JTaskConfig jTaskConfig = new JTaskConfig();
            jTaskConfig.setOwner(Cytoscape.getDesktop());
            jTaskConfig.displayCloseButton(false);
            jTaskConfig.displayCancelButton(true);
            jTaskConfig.displayStatus(true);
            jTaskConfig.setAutoDispose(true);
            
            TaskManager.executeTask(task, jTaskConfig);
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(Cytoscape.getDesktop(),"Error occur when calculating metrics!", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
}//GEN-LAST:event_btnCalActionPerformed

    private void cbAllItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbAllItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange() == ItemEvent.SELECTED) {
            for(JCheckBox cb:cbMetrics) {
                cb.setSelected(true);
            }
        } else if(evt.getStateChange() == ItemEvent.DESELECTED) {
            for(JCheckBox cb:cbMetrics) {
                cb.setSelected(false);
            }
        }
}//GEN-LAST:event_cbAllItemStateChanged

    public boolean hasBSU(){
        return cbBSU.isSelected();
    }
    
    public boolean hasKnockoutRob(){
        return cbKnockout.isSelected();
    }
    
    public boolean hasOverExpressionRob(){
        return cbOverExpression.isSelected();
    }
    
    public boolean hasPInfluence(){
        return cbPINF.isSelected();
    }
    
    public boolean hasPStructure(){
        return cbPStructure.isSelected();
    }
    
    public boolean hasDegree(){
        return cbDeg.isSelected();
    }

    public boolean hasCloseness(){
        return cbCloseness.isSelected();
    }
    
    public boolean hasSpBetweeness(){
        return cbSpb.isSelected();
    }
    
    public boolean hasEigenvector(){
        return cbEigenvector.isSelected();
    }    
//    public boolean hsModularity()
//    {
//        return this.chkmodularity.isSelected();
//    }
//    public boolean hsOutsideModularity()
//    {
//        return this.chkoutsidemodularity.isSelected();
//    }
//    public boolean hsModularityforallpair()
//    {
//        return this.chkmodularitychange.isSelected();
//    }
    public boolean hsRemoveedgesbetweenmodule()
    {
        return this.chkremoveedgebetweenmodule.isSelected();
    }
    public boolean hsRemoveEdgesbetweeninsidemodule_times()
    {
        return this.chktimes.isSelected();
    }
    
    public boolean hsRemoverandomedges_in_out_modulerobustness()
    {
        return this.chkremoverandomedgesinoutr.isSelected();
    }
    public boolean hsRemoverandomedges_betweeninsidemodule_in_out_modulerobustness()
    {
        return this.chkremovebetweeninsidemoduleinoutmodule.isSelected();
    }
    
            
    //remove edges involving with
    public boolean hsRemoveEdgesInvolvingdfbleb()
    {
        return this.chkremovefbldeb.isSelected();
    }
    public boolean hsRemoveRandomEdges()
    {
        return this.chkremoverandomedges.isSelected();
    }
    
    //Edge centralities
    public boolean hasEdge_Degree(){
        return cbEdgeDeg.isSelected();
    }
    
    public boolean hasEdge_Betweenness(){
        return cbEdgeBEW.isSelected();
    }
    
    public boolean hasEdge_NuFBL(){
        return cbEdgeNuFBL.isSelected();
    }
    
    public boolean hasKOEdge_Attractors(){
        return cbKOEdge_attractors.isSelected();
    }
    /**/
    
    private void cbDegItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbDegItemStateChanged
        // TODO add your handling code here:
}//GEN-LAST:event_cbDegItemStateChanged

    private void cbClosenessItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbClosenessItemStateChanged
        // TODO add your handling code here:
}//GEN-LAST:event_cbClosenessItemStateChanged

    private void cbSpbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbSpbItemStateChanged
        // TODO add your handling code here:
}//GEN-LAST:event_cbSpbItemStateChanged

    private void cbEigenvectorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbEigenvectorItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cbEigenvectorItemStateChanged

    private void cbBSUItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbBSUItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cbBSUItemStateChanged

    private void cbKOEdge_attractorsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbKOEdge_attractorsItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cbKOEdge_attractorsItemStateChanged

    private void cbEdgeDegItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbEdgeDegItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cbEdgeDegItemStateChanged

    private void cbEdgeBEWItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbEdgeBEWItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cbEdgeBEWItemStateChanged

    private void cbEdgeNuFBLItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbEdgeNuFBLItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cbEdgeNuFBLItemStateChanged

    private void cbKnockoutItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbKnockoutItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cbKnockoutItemStateChanged

    private void cbOverExpressionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbOverExpressionItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cbOverExpressionItemStateChanged
    private double Analysis_Modularity(ArrayList<Interaction> List_Interaction)
    {
        try{            
                                 
         Map<String,Map<String,Double>> graph = readGraph(List_Interaction);
        //Map<String,Map<String,Double>> graph = readGraph1("F:\\PHD\\Mr Cuong\\NetDS\\graph2.txt");
        graph = makeSymmetricGraph(graph);
        Map<String,modularity.Node> nameToNode = makeNodes(graph);
        //step 4
        List<modularity.Node> nodes = new ArrayList<modularity.Node>(nameToNode.values());
        //step 5
        List<modularity.Edge> edges = makeEdges(graph,nameToNode);
        //step 6
        Map<modularity.Node,double[]> nodeToPosition = makeInitialPositions(nodes, false);
       // new MinimizerBarnesHut(nodes, edges, 0.0, 1.0, 0.05).minimizeEnergy(nodeToPosition, 100);
        // see class OptimizerModularity for a description of the parameters

        Map<modularity.Node,Integer> nodeToCluster =new OptimizerModularity().execute(nodes, edges, false);        
        }
         catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error while examning modularity: " + e.getMessage());
        }
        return MyRBN.modularityvalue;
    }
    
     private static void SaveClustering(Map<modularity.Node,double[]> nodeToPosition, 
            Map<modularity.Node,Integer>nodeToCluster) {
            int i;    
            int numberofclusters=0;
            boolean ok;                    
            
		for (modularity.Node node : nodeToPosition.keySet()) 
                {
                    ok=false;
                    //find node in node list
                    for(i=0;i<MyRBN.nodes.size();i++)
                        if(MyRBN.nodes.get(i).NodeID.compareTo(node.name)==0)
                        {
                            ok=true;
                            break;
                        }
                    //assign clusterid to node
                    if(ok)    MyRBN.nodes.get(i).ClusterID=nodeToCluster.get(node);
                    
                    if (numberofclusters==0)
                    {
                        MyRBN.ac[numberofclusters]=nodeToCluster.get(node);
                        numberofclusters++;
                    }
                    else
                    {
                        ok=false;                    
                        for(int j=0;j<numberofclusters;j++)
                            if(MyRBN.ac[j]==nodeToCluster.get(node))
                            {
                                ok=true;
                                break;
                            }
                        if(ok==false)
                        {
                            MyRBN.ac[numberofclusters]=nodeToCluster.get(node);
                            numberofclusters++;
                        }
                     }
               }         
               //sort ac[i] array (ascending)
               int min=0,temp=0;               
               for(i=0;i<numberofclusters-1;i++)
               {
                   min=i;
                   for(int j=i+1;j<numberofclusters;j++)
                       if(MyRBN.ac[j]<MyRBN.ac[min]) min=j;
                   if(min!=i)
                   {
                       temp=MyRBN.ac[min];
                       MyRBN.ac[min]=MyRBN.ac[i];
                       MyRBN.ac[i]=temp;
                   }
               }    
               MyRBN.NumberOfCluster=numberofclusters;
                //calculate information for module class           
    } 
     
    private static Map<String,Map<String,Double>> readGraph(ArrayList<Interaction> ipinter) {
		
            Map<String,Map<String,Double>> result = new HashMap<String,Map<String,Double>>();
		
            Integer n,i;
            n=ipinter.size();
            for(i=0;i<n;i++)
            {
                String source=ipinter.get(i).NodeSrc;
                String target=ipinter.get(i).NodeDst;
                double weight=1.0f;
                if (result.get(source) == null) result.put(source, new HashMap<String,Double>());
		result.get(source).put(target, weight);
               // System.out.print(source+"|"+target+"\n");
            }
            
           	return result;
	}
          
         private static Map<String,Map<String,Double>> makeSymmetricGraph
			(Map<String,Map<String,Double>> graph) 
        {
		Map<String,Map<String,Double>> result = new HashMap<String,Map<String,Double>>();
                
		for (String source : graph.keySet()) {
			for (String target : graph.get(source).keySet()) {
				double weight = graph.get(source).get(target);
				double revWeight = 0.0f;
				if (graph.get(target) != null && graph.get(target).get(source) != null) {
					revWeight = graph.get(target).get(source);
				}
				if (result.get(source) == null) result.put(source, new HashMap<String,Double>());
				result.get(source).put(target, weight+revWeight);
				if (result.get(target) == null) result.put(target, new HashMap<String,Double>());
				result.get(target).put(source, weight+revWeight);
			}       
                        
		}                
		return result;
	}
         private static Map<String,modularity.Node> makeNodes(Map<String,Map<String,Double>> graph) {
		Map<String,modularity.Node> result = new HashMap<String,modularity.Node>();
		for (String nodeName : graph.keySet()) {
            double nodeWeight = 0.0;
            for (double edgeWeight : graph.get(nodeName).values()) {
                nodeWeight += edgeWeight;
            }
			result.put(nodeName, new modularity.Node(nodeName, nodeWeight));
		}
		return result;
	}
         
	 private static List<modularity.Edge> makeEdges(Map<String,Map<String,Double>> graph, 
            Map<String,modularity.Node> nameToNode)
    {
        List<modularity.Edge> result = new ArrayList<modularity.Edge>();
        for (String sourceName : graph.keySet()) {
            for (String targetName : graph.get(sourceName).keySet()) {
                modularity.Node sourceNode = nameToNode.get(sourceName);
                modularity.Node targetNode = nameToNode.get(targetName);
                double weight = graph.get(sourceName).get(targetName);
                result.add( new modularity.Edge(sourceNode, targetNode, weight) );
            }
        }
        return result;
    }
         
    private static Map<modularity.Node,double[]> makeInitialPositions(List<modularity.Node> nodes, boolean is3d) {
        Map<modularity.Node,double[]> result = new HashMap<modularity.Node,double[]>();
		for (modularity.Node node : nodes) {
            double[] position = { Math.random() - 0.5,
                                  Math.random() - 0.5,
                                  is3d ? Math.random() - 0.5 : 0.0 };
            result.put(node, position);
		}
		return result;
	}
    
    public boolean createRBN_BarabasiAlbert_Ver2(int numofnodes, int numoflinks, int numofinitnodes) {
        int edgesToAdd;
        try {
            Random random=new Random();

            int i,j;
            
            int degrees[] = new int[numofnodes];
            
            int numofedges;
            numofedges = 0;
            ArrayList<Interaction> inatemp = new ArrayList<Interaction>();
            int inatype;
            for (i = 0; i < numofinitnodes; i++){
                for (j = (i + 1); j < numofinitnodes; j++){
                    inatype = (Math.random()<0.5)?-1:1;
                    inatemp.add(numofedges,new Interaction());
                    
                    inatemp.get(numofedges).InteractionType=inatype;
                    if(Math.random()<0.5){
                        inatemp.get(numofedges).NodeSrc=Integer.toString(i);
                        inatemp.get(numofedges).NodeDst=Integer.toString(j);
                    }else{
                        inatemp.get(numofedges).NodeDst=Integer.toString(i);
                        inatemp.get(numofedges).NodeSrc=Integer.toString(j);

                    }
                    degrees[i]++;
                    degrees[j]++;
                    numofedges++;
                }
            }

            for (i = numofinitnodes; i < numofnodes; i++){
                int added = 0;
                double degreeIgnore = 0;
                edgesToAdd=(numoflinks-numofedges)/(numofnodes-i);
                for (int m = 0; m < edgesToAdd; m++){
                    double prob = 0;
                    double randNum = random.nextDouble();
                    for (j = 0; j < i; j++){
                        boolean existing=true;
                        Interaction temp;
                        int lc=0;
                        while(true){
                            inatype = (Math.random()<0.5)?-1:1;

                            temp=new Interaction();
                            
                            temp.InteractionType=inatype;
                            if(Math.random()<0.5){
                                temp.NodeSrc=Integer.toString(i);
                                temp.NodeDst=Integer.toString(j);
                            }else{
                                temp.NodeDst=Integer.toString(i);
                                temp.NodeSrc=Integer.toString(j);

                            }

                            if(checkExistInteraction(temp, numofedges, inatemp) == false){
                                prob += (double) ((double) degrees[j])/ ((double) (2.0d * numofedges) - degreeIgnore);
                                existing=false;
                                break;
                            }
                            lc++;
                            if(lc>10) break;
                        }
                        if (randNum <= prob && existing==false){
                            inatemp.add(numofedges,temp);

                            degreeIgnore += degrees[j];

                            added++;

                            degrees[i]++;
                            degrees[j]++;

                            numofedges++;

                            break;
                        }
                    }
                }
            }
            NumOfIna = numofedges;
            NumOfNode = numofnodes;

            String fileName="RBN.txt";

            PrintWriter output=new PrintWriter(new FileOutputStream(fileName),true);//auto flush

            for (i = 0; i < NumOfIna; i++) {
                //System.out.println(inatemp.get(i).NodeSrc + "\t" + inatemp.get(i).InteractionType + "\t" + inatemp.get(i).NodeDst);
                output.println(inatemp.get(i).NodeSrc + "\t" + inatemp.get(i).InteractionType + "\t" + inatemp.get(i).NodeDst);
            }
            output.close();

            //Output to Object
            MyRBN.nodes = new ArrayList<myrbn.Node>();
            MyRBN.rndina = new ArrayList<Interaction>();

            Set<String> ns = new TreeSet<String>();
            for (i = 0; i < NumOfNode; i++) {
                ns.add(Integer.toString(i));
            }
            Iterator<String> it = ns.iterator();
            while(it.hasNext()){
                nodes.add(new myrbn.Node(it.next()));
            }
            
//            for (i = 0; i < NumOfNode; i++) {
//                nodes.add(i, new Node(Integer.toString(i),Integer.toString(i)));
//            }
//            System.out.println("Show network from Object");
            for(i=0;i<NumOfIna;i++){
                rndina.add(inatemp.get(i));
                
            }
//            for (i = 0; i < NumOfIna; i++) {
//                System.out.println(rndina.get(i).InteractionID + ": " + rndina.get(i).NodeSrc.NodeID + "\t" + rndina.get(i).InteractionType + "\t" + rndina.get(i).NodeDst.NodeID);
//            }


        } catch (Exception e) {
            e.printStackTrace();
        }

        return true;
    }
    boolean checkExistInteraction(Interaction newina, int numofina, ArrayList<Interaction> ina) {
        boolean exist = false;
        int i;
        for(i=0;i<numofina;i++) {
            if (newina.NodeSrc.compareTo(ina.get(i).NodeSrc)==0 && newina.NodeDst.compareTo(ina.get(i).NodeDst)==0) {
                exist = true;
                break;
            }
        }
        return exist;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCal;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cbAll;
    private javax.swing.JCheckBox cbBSU;
    private javax.swing.JCheckBox cbCloseness;
    private javax.swing.JCheckBox cbDeg;
    public static javax.swing.JCheckBox cbEdgeBEW;
    public static javax.swing.JCheckBox cbEdgeDeg;
    public static javax.swing.JCheckBox cbEdgeNuFBL;
    private javax.swing.JCheckBox cbEigenvector;
    private javax.swing.JCheckBox cbKOEdge_attractors;
    private javax.swing.JCheckBox cbKnockout;
    private javax.swing.JCheckBox cbOverExpression;
    private javax.swing.JCheckBox cbPINF;
    private javax.swing.JCheckBox cbPStructure;
    private javax.swing.JCheckBox cbSpb;
    public static javax.swing.JCheckBox chkremovebetweeninsidemoduleinoutmodule;
    public static javax.swing.JCheckBox chkremoveedgebetweenmodule;
    public static javax.swing.JCheckBox chkremoveedgesbiggestsmallermoduleedges;
    public static javax.swing.JCheckBox chkremoveedgesbiggestsmallermodulenodes;
    public static javax.swing.JCheckBox chkremovefbldeb;
    public static javax.swing.JCheckBox chkremoverandomedges;
    public static javax.swing.JCheckBox chkremoverandomedgesinoutr;
    public static javax.swing.JCheckBox chktimes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    public static javax.swing.JLabel lblanalyzingnetwork;
    private javax.swing.JPanel pnlMetrics;
    public static javax.swing.JTextField txtMaxLengthFBL;
    public javax.swing.JTextField txtMutationTime;
    public javax.swing.JTextField txtNumRules;
    public javax.swing.JTextField txtNumStates;
    public static javax.swing.JTextField txtR;
    public static javax.swing.JTextField txtStates;
    public static javax.swing.JTextField txtmodularitytimes;
    public static javax.swing.JTextField txtnoedges;
    public static javax.swing.JTextField txtpair;
    public static javax.swing.JTextField txtpercentbetweenmodule;
    public static javax.swing.JTextField txtpercentinsidemodule;
    public static javax.swing.JTextField txtremovepercentage;
    // End of variables declaration//GEN-END:variables

}
